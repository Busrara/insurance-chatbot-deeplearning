# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import json
import numpy as np
import random
import pickle
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import SGD
import nltk
from nltk.stem import WordNetLemmatizer
import os
import matplotlib.pyplot as plt

# Download necessary NLTK data
nltk.download('punkt')
nltk.download('wordnet')

# Initialize lemmatizer
lemmatizer = WordNetLemmatizer()

# Insurance compant intents data
intents = {
    "intents": [
        {
            "tag": "greeting",
            "patterns": ["Hi", "Hello", "Hey", "Good day", "Greetings", "How are you", "What's up"],
            "responses": ["Hello! How can I assist you with your insurance needs today?",
                         "Hi there! Welcome to our insurance service. How may I help you?",
                         "Hello! I'm here to help with your insurance questions."]
        },
        {
            "tag": "goodbye",
            "patterns": ["Bye", "See you later", "Goodbye", "Thank you, bye", "That's all"],
            "responses": ["Thank you for contacting our insurance service. Have a great day!",
                         "Goodbye! Feel free to contact us again with any insurance questions.",
                         "Thank you for your time. If you need further assistance, don't hesitate to reach out!"]
        },
        {
            "tag": "thanks",
            "patterns": ["Thanks", "Thank you", "That's helpful", "Appreciate it", "Thanks for the help"],
            "responses": ["You're welcome! Happy to assist with your insurance needs.",
                         "Anytime! Your satisfaction is our priority.",
                         "Glad I could help! Is there anything else you'd like to know about our insurance services?"]
        },
        {
            "tag": "policy_info",
            "patterns": ["Tell me about your policies", "What insurance do you offer", "Types of insurance",
                        "Insurance options", "Available policies", "What policies do you have"],
            "responses": ["We offer various insurance policies including health, life, auto, home, and travel insurance. Which one are you interested in?",
                         "Our insurance portfolio includes health, life, auto, property, and business insurance. Would you like more details on any specific type?",
                         "We provide comprehensive insurance solutions including personal and business policies. May I know which type you're looking for?"]
        },
        {
            "tag": "health_insurance",
            "patterns": ["Tell me about health insurance", "Health policy", "Medical insurance",
                        "Health coverage", "Healthcare plans", "Medical coverage options"],
            "responses": ["Our health insurance plans offer comprehensive coverage for medical expenses, hospitalization, and preventive care. We have individual, family, and group plans available.",
                         "We offer flexible health insurance policies with coverage for doctor visits, hospital stays, prescription drugs, and preventive services. Would you like a personalized quote?",
                         "Our health insurance includes coverage for medical emergencies, planned procedures, and wellness benefits. Would you like to know about our specific plans?"]
        },
        {
            "tag": "life_insurance",
            "patterns": ["Life insurance information", "Life policy", "Term life", "Whole life insurance",
                        "Life coverage options", "Tell me about life insurance"],
            "responses": ["We offer both term and permanent life insurance policies to provide financial security for your loved ones. Term policies provide coverage for a specific period, while permanent policies offer lifelong protection with additional benefits.",
                         "Our life insurance options include term life, whole life, and universal life policies with various coverage amounts and premium options tailored to your needs and budget.",
                         "We provide customizable life insurance solutions that can help protect your family's financial future. Would you like to discuss which option might be best for your situation?"]
        },
        {
            "tag": "auto_insurance",
            "patterns": ["Car insurance", "Auto policy", "Vehicle insurance", "Auto coverage",
                        "Motor insurance", "Insurance for my car"],
            "responses": ["Our auto insurance provides comprehensive coverage including liability, collision, comprehensive, and uninsured motorist protection. We also offer add-ons like roadside assistance.",
                         "Our car insurance policies offer protection against accidents, theft, and damage, with optional coverages for rental reimbursement and gap insurance.",
                         "We provide competitive auto insurance rates with discounts for safe drivers, multiple vehicles, and bundling with other policies. Would you like a quote?"]
        },
        {
            "tag": "home_insurance",
            "patterns": ["Home insurance", "Homeowner policy", "House insurance", "Property insurance",
                        "Residential insurance", "Coverage for my home"],
            "responses": ["Our home insurance covers your dwelling, personal property, liability, and additional living expenses if your home becomes uninhabitable due to a covered loss.",
                         "We offer comprehensive homeowners insurance that protects your house structure, belongings, and provides liability coverage for accidents on your property.",
                         "Our property insurance policies can be customized with additional coverages for valuables, water backup, and identity theft protection. Would you like more information?"]
        },
        {
            "tag": "claims",
            "patterns": ["How to file a claim", "Claim process", "Submit insurance claim",
                        "Report a claim", "Claim procedure", "Make a claim"],
            "responses": ["You can file a claim through our website, mobile app, or by calling our 24/7 claims hotline. We'll need your policy number and details about the incident.",
                         "Our claims process is simple: report the incident, provide necessary documentation, and our claims adjuster will assess the situation and guide you through the next steps.",
                         "To submit a claim, please contact our claims department with your policy information and incident details. We aim to process claims efficiently to provide you with prompt assistance."]
        },
        {
            "tag": "premium_payment",
            "patterns": ["How to pay premium", "Payment options", "Pay my insurance",
                        "Premium payment methods", "Pay bill", "Make a payment"],
            "responses": ["You can pay your premium online through our website, mobile app, by phone, mail, or set up automatic payments from your bank account or credit card.",
                         "We offer multiple payment options including monthly, quarterly, semi-annual, or annual payment schedules to fit your budget needs.",
                         "Premium payments can be made via credit/debit card, bank transfer, check, or through our automatic payment system. Would you like assistance setting up a payment method?"]
        },
        {
            "tag": "coverage_amount",
            "patterns": ["How much coverage do I need", "Recommended coverage", "Coverage calculation",
                        "Insurance amount", "Sufficient coverage", "Coverage advice"],
            "responses": ["The appropriate coverage amount depends on various factors such as your assets, liabilities, health condition, and future financial goals. We can provide a personalized assessment.",
                         "For home insurance, we typically recommend coverage equal to the full replacement cost of your home. For life insurance, consider your income, debts, and future expenses like education.",
                         "Our insurance advisors can help determine the optimal coverage based on your specific situation and risk profile. Would you like to speak with an advisor for personalized recommendations?"]
        },
        {
            "tag": "quote",
            "patterns": ["Get a quote", "Insurance estimate", "Policy cost", "How much does it cost",
                        "Premium estimate", "Price quote"],
            "responses": ["To provide an accurate quote, we'll need some information about you and your specific insurance needs. Would you like to proceed with a specific type of insurance?",
                         "You can get a quick quote through our website by entering basic information, or we can gather details now to provide an estimate for your desired coverage.",
                         "Our quotes are personalized based on several factors. I can help start the process now, or you can visit our website for an online quote tool."]
        },
        {
            "tag": "discounts",
            "patterns": ["Insurance discounts", "Save on insurance", "Discount options",
                        "Lower my premium", "Available discounts", "Reduce insurance cost"],
            "responses": ["We offer various discounts including multi-policy bundles, good driver discounts, home security system discounts, and loyalty rewards for long-term customers.",
                         "You may qualify for discounts based on your claims history, safety features in your home or vehicle, professional affiliations, or by bundling multiple policies.",
                         "We provide competitive rates and numerous discount opportunities. Our agents can review your situation to ensure you're receiving all eligible discounts."]
        },
        {
            "tag": "policy_changes",
            "patterns": ["Change my policy", "Update insurance", "Modify coverage",
                        "Adjust my insurance", "Policy modifications", "Change coverage"],
            "responses": ["You can request policy changes by contacting our customer service, through your online account, or by speaking with your assigned insurance agent.",
                         "Policy modifications such as coverage adjustments, adding drivers, or updating property details can be processed quickly. Most changes take effect immediately or on a date you specify.",
                         "To update your policy, please provide your policy number and specific details about the changes you'd like to make. We're happy to help you adjust your coverage as needed."]
        },
        {
            "tag": "contact_agent",
            "patterns": ["Speak to an agent", "Talk to representative", "Contact information",
                        "Agent assistance", "Talk to someone", "Live person"],
            "responses": ["Our insurance agents are available Monday through Friday, 8 AM to 8 PM, and Saturday from 9 AM to 5 PM. Would you like their direct contact information?",
                         "I can connect you with a licensed insurance agent who can provide personalized assistance. Would you prefer a phone call, video chat, or in-person appointment?",
                         "Our representatives are ready to help with your insurance needs. Please provide your preferred contact method, and we'll have an agent reach out to you."]
        }
    ]
}

# Creating training data
words = []
classes = []
documents = []
ignore_letters = ['?', '!', '.', ',']

for intent in intents['intents']:
  for pattern in intent['patterns']:
    word_list = nltk.word_tokenize(pattern)
    words.extend(word_list)
    documents.append((word_list, intent['tag']))
    if intent['tag'] not in classes:
      classes.append(intent['tag'])

# Lemmatize and lowercase each word and remove duplicates
words = [lemmatizer.lemmatize(word.lower()) for word in words if word not in ignore_letters]
words = sorted(list(set(words)))
classes = sorted(list(set(classes)))

# Training data
training = []
output_empty = [0] * len(classes)

for document in documents:
  # Initialize bag of words
  bag = []
  # List of tokenized words for the pattern
  word_patterns = document[0]
  # Lemmatize each word
  word_patterns = [lemmatizer.lemmatize(word.lower()) for word in word_patterns]
  # Create bag of words array
  for word in words:
    bag.append(1) if word in word_patterns else bag.append(0)

  # Output is a '0' for each tag and '1' for current tag
  output_row = list(output_empty)
  output_row[classes.index(document[1])] = 1
  training.append([bag, output_row])

# Shuffle and convert to np array
random.shuffle(training)
training = np.array(training, dtype=object)

# Split the features and target labels
train_x = list(training[:, 0])
train_y = list(training[:, 1])

# Save the data for future use
with open("words.pkl", "wb") as f:
  pickle.dump(classes,f)

# Create and train the deep learning model
model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

# Compile model
sgd = SGD(learning_rate=0.1, weight_decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

# Train the model and capture history for visualization
hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)
model.save("chatbot_model.h5")
print("Model training has been completed!")

# Visualize training results
def plot_training_history(history):
  plt.figure(figsize=(12, 5))

  # Plot training & validation accuracy values
  plt.subplot(1, 2, 1)
  plt.plot(history.history['accuracy'])
  plt.title('Model Accuracy')
  plt.ylabel('Accuracy')
  plt.xlabel('Epoch')
  plt.grid(True)

  # Plot training & validation loss values
  plt.subplot(1, 2, 2)
  plt.plot(history.history['loss'])
  plt.title('Model Loss')
  plt.ylabel('Loss')
  plt.xlabel('Epoch')
  plt.grid(True)

  plt.tight_layout()
  plt.savefig('training_history.png')
  plt.show()

plot_training_history(hist)

def clean_up_sentence(sentence):
  sentence_words = nltk.word_tokenize(sentence)
  sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
  return sentence_words

# Return bag of words array: 0 or 1 for each word in the bag that exists in the sentence
def bag_of_words(sentence):
  sentence_words = clean_up_sentence(sentence)
  bag = [0]*len(words)
  for w in sentence_words:
    for i, word in enumerate(words):
      if word==w:
        bag[i]=1
  return np.array(bag)

# Predict intent with the model
def predict_class(sentence):
  bow = bag_of_words(sentence)
  res = model.predict(np.array([bow]))[0]
  ERROR_THRESHOLD = 0.25
  results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]

  results.sort(key=lambda x: x[1], reverse=True)
  return_list = []
  for r in results:
    return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
  return return_list

# Get a response based on the predicted intent
def get_response(intents_list, intents_json):
  if not intents_list:
    return("I am not sure I understand. Can you please rephrase your question.")
    tag = intents_list[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
      if i['tag'] == tag:
        result = random.choice(i['responses'])
        break
    return results

# Visualize model performance on specific test phrases
def visualize_intent_prediction(test_phrases):
  plt.figure(figsize=(12,8))
  for i, phrase in enumerate(test_phrases):
    intents_list = predict_class(phrase)
    if intents_list:
      tag = intents_list[0]['intent']
      prob = float(intents_list[0]['probability'])

      plt.barh(i, prob, color='skyblue')
      plt.text(prob + 0.01, i, f"{prob:.2f}", va='center')
      plt.text(-0.1, i, f"{phrase} → {tag}", ha='right', va='center')

  plt.xlim(0,1.15)
  plt.yticks(range(len(test_phrases)), [""] * len(test_phrases))
  plt.xlabel('Confidence Score')
  plt.title('Intent Prediction Confidence for Test Phrases')
  plt.tight_layout()
  plt.savefig('intent_predictions.png')
  plt.show()

# Create a class for the Chatbot
class InsureChatbot:
  def __init__(self):
    print("Initializing...")
    if not os.path.exists("charbot_model.h5"):
      print("Training model...")
    else:
      self.model = tf.keras.models.load_model("chatbot_model.h5")
      with open("words.pkl", "rb") as f:
        self.words = pickle.load(f)
      with open("classes.pkl", "rb") as f:
        self.classes = pickle.load(f)
      print("Model is loaded.")

  def get_response(self, user_input):
   intents_list = predict_class(user_input)
   return get_response(intents_list, intents)

  def visualize_intent_distribution(self):
   intent_counts = {}
   for intent in intents['intents']:
    intent_counts[intent['tag']] = len(intent['patterns'])

   sorted_intents = dict(sorted(intent_counts.items(), key=lambda x:x[1], reverse=True))

   plt.figure(figsize=(12,6))
   plt.bar(sorted_intents.keys(), sorted_intents.values(), color='skyblue')
   plt.xticks(rotation=45, ha='right')
   plt.xlabel('Intent Categories')
   plt.ylabel('Number of Training Patterns')
   plt.title('Distribution of Training Patterns Across Intent Categories')
   plt.tight_layout()
   plt.savefig('intent_distribution.png')
   plt.show()

  def analyze_model_performance(self):
    test_phrases = [
            "I need help with my car insurance",
            "How do I file a claim?",
            "What health plans do you offer?",
            "I want to speak with someone",
            "How can I pay my bill?",
            "Tell me about life insurance options",
            "Do you offer any discounts?",
            "I need to change my policy"
        ]
    visualize_intent_prediction(test_phrases)
    self.visualize_intent_distribution()

if __name__=="__main__":
    chatbot = InsuranceChatbot()
    chatbot.analyze_model_performance()

    print("\nInsurance Chatbot: Hello! How can I assist you with your insurance needs today? (Type 'quit' to exit)")

    while True:
      user_input = input("You: ")
      if user_input.lower() =='quit':
        print("Insurance Chatbot: Thank you for using our service. Have a great day!")
        break
      response = chatbot.get_response(user_input)
      print(f"Insurance Chatbot: {response}")